elastic-query-service:
  version: v1
  custom-audience: elastic-query-service
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760 # 10MB
    content-type: 'application/vnd.api.v1+json'
    accept-type: 'application/vnd.api.v1+json'
    query-type: 'ANALYTICS_DATABASE'
    query-from-kafka-state-store:
      method: GET
      uri: "http://localhost:8187/kafka-streams-service/get-word-count-by-word/{word}"
      accept: ${elastic-query-service.webclient.accept-type}
    query-from-analytics-database:
      method: GET
      uri: "http://localhost:8187/analytics-service/get-word-count-by-word/{word}"
      accept: ${elastic-query-service.webclient.accept-type}


server:
  port: 8183
  servlet:
    context-path: /elastic-query-service
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8082/auth/realms/microservices-realm
          jwk-set-uri: http://localhost:8082/auth/realms/microservices-realm/protocol/openid-connect/certs
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-service'
            client-secret: '{cipher}ec04ab5b5e7a35f938aa58f3bace5f1ca4c104eeb04a41a4a03e61c6fec79b1d291434a0b6b49443540a3147da85ff9a6712e1c129ce0d17893ace1f1e5238ca'
            authorizationGrantType: client_credentials
        provider:
          keycloak:
            tokenUri: http://localhost:8082/auth/realms/microservices-realm/protocol/openid-connect/token
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true
    username: postgres
    password: '{cipher}f371b0394443dd994856ecf1f7ceb5dcc7ef75eb782a0157ddcd4f3bfd5e1170'
    driver-class-name: org.postgresql.Driver
    platform: postgres
    schema: classpath:init-schema.sql
    data: classpath:init-data.sql
    initialization-mode: always

elastic-query-config:
  text-field: text

elastic-config:
  index-name: twitter-index
  connection-url: http://localhost:9200
  connect-timeout-ms: 5000
  socket-timeout-ms: 30000

user-config:
  username: test
  password: '{cipher}aea348e935d0634c98daeb43c8f8d3a187c694899cc37564d68b9f4197b72006'
  roles: USER

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

security:
  paths-to-ignore: /api-docs